# ------------------------------------
# Shutdown Daemon PowerShell Script
# Version 1.0.2
# -------------------------------------
param (
    [string] $ipAddress,
    [int] $port,
    [string] $secretKey
)

#--------------------------------------------------------------------------------
#                               Important
#
# This script reads information from a .env file located in $appDataPath
# If no .env file is present these values are default
# ipAddress = 0.0.0.0   - IP to bind the Daemon or as start parameter with -ipAddress
# port      = 8080      - Port to bind the Daemon or as start parameter with -port
# secretKey =           - Secret used to communicate with the Wake-on-LAN server, cannot be empty and must be set either in .env or as start parameter with -secretKey
#                         If not set via -secretKey or in .env prompt will come up to enter it.
#------------------------------------------------------------------------------


# -----------------------------
# Begin of Configuration Section
# Set your desired values here
# -----------------------------

$appDataPath = Join-Path -Path $env:APPDATA -ChildPath "shutdown-daemon"
# This creates the daemon's DATA folder named "shutdown-daemon".
# $env:APPDATA points to the user's AppData\Roaming directory.

$bcryptDllPath = Join-Path -Path $appDataPath -ChildPath "BCrypt.Net-Next.dll"
# This defines the path to the BCrypt.Net-Next.dll file, expected to be inside the "shutdown-daemon" folder.

$keyFile = Join-Path -Path $appDataPath -ChildPath "enc.bin"
# This sets the path to the encryption key file "enc.bin", located in the "shutdown-daemon" folder.

$usersFilePath = Join-Path -Path $appDataPath -ChildPath "users.json"
# This defines the path to the users file inside the "shutdown-daemon" folder,
# Used for storing user information in JSON format.

$logFilePath = Join-Path -Path $appDataPath -ChildPath "daemon.log"
# This creates the path for the log file named in the "shutdown-daemon" folder,
# where logging information for the daemon process can be stored.

$envFilePath = Join-Path -Path $appDataPath -ChildPath ".env"
# This constructs the full path to the ".env" file within the "shutdown-daemon" directory in the user's AppData folder.
# It combines the base path stored in $appDataPath with the ".env" file name.

$wolip = "100.125.20.111"
# This variable stores the IP address for Wake-on-LAN (WOL) server.
# It will be used to communicate with the Wake-on-LAN server.

$wolport = "8889"
# This defines the port number to used by the Wake-on-LAN server.

# -----------------------------
# End of Configuration Section
# Set your desired values here
# -----------------------------


# --------------------------------------------------------------------------------------
#                                  Main Script Logic
# Anything after this line will break functionality if you don't know what you're doing.
# ---------------------------------------------------------------------------------------

if (-not (Test-Path -Path $appDataPath)) {
    New-Item -ItemType Directory -Path $appDataPath -Force | Out-Null
}

$global:users = @{}

function Initialize-Users {
    if (-not (Test-Path -Path $appDataPath)) {
        New-Item -ItemType Directory -Path $appDataPath -Force | Out-Null
    }

    if (-not (Test-Path -Path $usersFilePath)) {
        Write-LogMessage "No users file found. Prompting user to set up the first username and password."

        $username = Read-Host "Enter username"
        $password = Read-Host -AsSecureString "Enter password" | ConvertFrom-SecureString -AsPlainText
        $permission = Read-Host "Enter permission level (e.g., 'admin', 'user')"

        $hashedPassword = [BCrypt.Net.BCrypt]::HashPassword($password)

        $global:users = @{
            $username = @{
                "username"      = $username
                "password_hash" = $hashedPassword
                "permission"    = $permission
            }
        }

        $global:users | ConvertTo-Json -Depth 3 | Set-Content -Path $usersFilePath -Force

        Write-LogMessage "First user has been set up and saved successfully." White
    }
    else {
        Write-LogMessage "Loading existing users..." Cyan

        try {
            $global:users = Get-Content -Path $usersFilePath | ConvertFrom-Json
        }
        catch {
            Write-LogMessage "Error loading users from $($usersFilePath): $_"
            Exit
        }

        if ($null -eq $global:users) {
            Write-LogMessage "Failed to load users from $usersFilePath. Exiting."
            Exit
        }

        Write-LogMessage "Users loaded successfully." Cyan
    }
}

function Get-EnvValues {
    # Check if the .env file exists
    if (-not (Test-Path -Path $envFilePath)) {
        Write-Error "The specified .env file does not exist."
        return
    }

    # Create a hashtable to store the key-value pairs
    $envValues = @{}

    # Read the .env file line by line
    Get-Content $envFilePath | ForEach-Object {
        # Skip empty lines and lines that start with '#'
        if (-not ($_ -match '^\s*$') -and -not ($_ -match '^\s*#')) {
            # Split the line at the '=' character to extract key and value
            $key, $value = $_ -split '=', 2

            # Trim any whitespace and store the key-value pair in the hashtable
            $envValues[$key.Trim()] = $value.Trim()
        }
    }

    # Set default values for ipAddress, port, and secretKey if they are not set or are empty
    $ipAddress = if ($envValues['ipAddress']) { $envValues['ipAddress'] } else { "0.0.0.0" }   # Default to 0.0.0.0 or another value
    $port = if ($envValues['port']) { $envValues['port'] } else { "8080" }                      # Default to port 80 or another value
    $secretKey = if ($envValues['secretKey']) { $envValues['secretKey'] } else { "" }         # Default to an empty string

    # Return the values as an object
    return [pscustomobject]@{
        ipAddress = $ipAddress
        port      = $port
        secretKey = $secretKey
    }
}
$global:envData = Get-EnvValues

# Set default values for parameters if they are not provided
if (-not $PSBoundParameters.ContainsKey('ipAddress')) {
    $ipAddress = $global:envData.ipAddress
}

if (-not $PSBoundParameters.ContainsKey('port')) {
    $port = $global:envData.port
}

if (-not $PSBoundParameters.ContainsKey('secretKey')) {
    $secretKey = $global:envData.secretKey
}

if (-not $secretKey) {

    if ($PSCommandPath) {
        # Running as a .ps1 script
        $scriptName = Split-Path $PSCommandPath -Leaf
    }
    elseif ($MyInvocation.MyCommand.Path) {
        # Running as a compiled executable or script
        $scriptName = Split-Path $MyInvocation.MyCommand.Path -Leaf
    }
    elseif ([System.AppDomain]::CurrentDomain.FriendlyName) {
        # Use FriendlyName to get the executable name when running as a compiled executable
        $scriptName = [System.AppDomain]::CurrentDomain.FriendlyName
    }
    else {
        # Fallback for unknown cases
        $scriptName = "UnknownScript"
    }

    Write-Host "🔷 Please enter your secretKey as you did in wol_server.py.`n`   To skip this message Run : $scriptName -secretKey <yourkey>"
    $secretKey = Read-Host -Prompt "secrektKey"
    if (-not $secretKey) {
        Write-LogMessage "❌ Error: The secretKey parameter is required and was not provided." Red
        exit 1
    }
}

function Write-LogMessage {
    param (
        [string] $message,
        [string] $color = "red"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp - $message"
    Add-Content -Path $logFilePath -Value $logMessage
    Write-Host $logMessage -ForegroundColor $color
}
function Restore-BcryptDll {
    if (-not (Test-Path $bcryptDllPath)) {
        Write-LogMessage "BCrypt.Net DLL not found, extracting from script..."

        # Base64-encoded BCrypt.Net DLL string (Please DO NOT DELETE THIS LINES)
        $base64Dll = @"

"@
        $dllBytes = [Convert]::FromBase64String($base64Dll)
        [System.IO.File]::WriteAllBytes($bcryptDllPath, $dllBytes)

        Write-LogMessage "BCrypt.Net DLL extracted to $bcryptDllPath" White
    }
    else {
        Write-LogMessage "BCrypt.Net DLL is already present at $bcryptDllPath" Green
    }
}
function Invoke-Key {
    return [System.IO.File]::ReadAllBytes($keyFile)
}

function Import-KeyUserBinary {
    # Generate the current timestamp
    $timestamp = [math]::Floor([double]::Parse((Get-Date -UFormat %s))).ToString()


    # Convert the timestamp and secret key to UTF-8 byte arrays
    $data = [Text.Encoding]::UTF8.GetBytes($timestamp)
    $key = [Text.Encoding]::UTF8.GetBytes($secretKey)

    # Create HMAC-SHA256 object and compute the hash
    $hmacsha256 = New-Object System.Security.Cryptography.HMACSHA256
    $hmacsha256.Key = $key
    $hashBytes = $hmacsha256.ComputeHash($data)

    # Convert the hash to a hexadecimal string
    $hash = -join ($hashBytes | ForEach-Object { "{0:x2}" -f $_ })

    # Prepare the headers and JSON body
    $headers = @{"Content-Type" = "application/json" }
    $jsonBody = @{"signature" = $hash; "timestamp" = $timestamp } | ConvertTo-Json
    $wolurl = "http://${wolip}:${wolport}"

    try {
        # Invoke the REST method
        $response = Invoke-RestMethod -Uri "$wolurl/api/sync_encryption_key" -Method Post -Headers $headers -Body $jsonBody

        # Check if the response contains a success message
        if ($response.success -eq $true) {
            $encryptionKeyBase64 = $response.encryption_key

            if ($encryptionKeyBase64) {
                # Decode the Base64-encoded encryption key back to binary
                $encryptionKeyBinary = [Convert]::FromBase64String($encryptionKeyBase64)

                # Save the binary key to a file named enc.bin
                [System.IO.File]::WriteAllBytes($keyFile, $encryptionKeyBinary)

                Write-LogMessage "Encryption key sync complete $keyFile" Green
            }
            else {
                Write-LogMessage "❌ Error: Failed to retrieve the encryption key from the server response." Red
                exit 1
            }
        }
        else {
            Write-LogMessage "❌ Error: ${response.message}" Red
            exit 1
        }
    }
    catch {
        Write-LogMessage "❌ Error: $_" Red
        exit 1
    }
}

function Import-BcryptDll {
    Restore-BcryptDll
    Add-Type -Path $bcryptDllPath
}

function Start-TcpServer {
    try {
        $global:listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Parse($ipAddress), $port)
        $listener.Start()
        Write-LogMessage "Server started on $($ipAddress):$port" Green

        while ($true) {
            if ($listener.Pending()) {
                $client = $listener.AcceptTcpClient()
                $stream = $client.GetStream()
                $reader = [System.IO.StreamReader]::new($stream)
                $writer = [System.IO.StreamWriter]::new($stream)
                $writer.AutoFlush = $true

                $data = $reader.ReadLine()

                Invoke-ClientRequest -data $data -writer $writer

                $client.Close()
            }
            Start-Sleep -Milliseconds 100
        }
    }
    catch {
        Write-LogMessage "An error occurred: $_"
    }
    finally {
        if ($null -ne $listener) {
            $listener.Stop()
            Write-LogMessage "Server stopped" White
        }
    }
}

function ConvertFrom-Encrypt {
    param (
        [string]$encryptedData
    )

    try {
        $encryptedBytes = [Convert]::FromBase64String($encryptedData)
        $iv = $encryptedBytes[0..15]
        $cipherText = $encryptedBytes[16..($encryptedBytes.Length - 1)]

        $aes = New-Object System.Security.Cryptography.AesManaged
        $aes.Key = Invoke-Key
        $aes.IV = $iv
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7

        $decryptor = $aes.CreateDecryptor()
        $decryptedBytes = $decryptor.TransformFinalBlock($cipherText, 0, $cipherText.Length)

        # Return the decrypted string
        return [System.Text.Encoding]::UTF8.GetString($decryptedBytes)
    }
    catch {
        # Log the decryption error and return $null
        Write-LogMessage "Decryption error: $_"
        $writer.Write("Decryption error: $_")
        return $null
    }
}

function Invoke-ClientRequest {
    param (
        [string]$data,
        [System.IO.StreamWriter]$writer
    )

    try {
        Write-LogMessage "Data recieved : $data"
        $decryptedData = ConvertFrom-Encrypt -encryptedData $data
        $parts = $decryptedData -split '\|'
        if ($parts.Length -eq 3) {
            $username, $password, $command = $parts

            if ($global:users.PSObject.Properties.Name -contains $username) {
                $user = $global:users.$username

                try {
                    $passwordValid = [BCrypt.Net.BCrypt]::Verify($password, $user.password_hash)
                }
                catch {
                    Write-LogMessage "Error during password verification: $_"
                    $writer.WriteLine("Error during password verification")
                    return
                }

                if ($passwordValid) {
                    switch ($command.ToLower()) {
                        "shutdown" {
                            $writer.WriteLine("Shutdown command received")
                            #Stop-Computer -Force
                            Write-LogMessage "Shutdown command invoked by '$username'. Server will continue running." White
                        }
                        default {
                            $writer.WriteLine("Invalid command")
                            Write-LogMessage "Invalid command received: $command" White
                        }
                    }
                }
                else {
                    $writer.WriteLine("Invalid credentials")
                    Write-LogMessage "Invalid credentials provided by client. Username: '$username'"
                }
            }
            else {
                $writer.WriteLine("User not found")
                Write-LogMessage "User '$username' not found in the users list."
            }
        }
        else {
            $writer.WriteLine("Invalid format")
            Write-LogMessage "Invalid data format received."
        }
    }
    catch {
        Write-LogMessage "Error during decryption or processing: $_"
        $writer.WriteLine("Error during decryption or processing")
    }
}

function Stop-TcpServer {
    if ($null -ne $listener) {
        $listener.Stop()
        Write-LogMessage "Server stopped by user." White
    }
}

$null = Register-EngineEvent -SourceIdentifier ConsoleBreak -Action {
    Write-LogMessage "Ctrl+C detected, stopping the server..." White
    Stop-TcpServer
    Exit
}

Import-BcryptDll
Initialize-Users
Import-KeyUserBinary
Start-TcpServer